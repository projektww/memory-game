import React, { useState } from 'react';
import { TowerControl as GameController } from 'lucide-react';
import Memory from './games/Memory';

type Difficulty = 'easy' | 'medium';

interface MemoryGame {
  id: string;
  name: string;
  emojis: string[];
}

function App() {
  const [currentGame, setCurrentGame] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [difficulty, setDifficulty] = useState<Difficulty>('medium');

  const memoryGames: MemoryGame[] = [
    // Zwierzƒôta
    { id: 'farm-animals', name: 'Zwierzƒôta Gospodarskie', emojis: ['üêÆ', 'üê∑', 'üêî', 'üêë', 'üê¥', 'ü¶É', 'üê∞', 'ü¶Ü'] },
    { id: 'wild-animals', name: 'Dzikie Zwierzƒôta', emojis: ['ü¶Å', 'üêØ', 'üêò', 'ü¶í', 'ü¶ä', 'ü¶ù', 'ü¶ò', 'ü¶¨'] },
    { id: 'sea-animals', name: 'Zwierzƒôta Morskie', emojis: ['üêã', 'üê¨', 'ü¶à', 'üêü', 'üê†', 'ü¶Ä', 'ü¶ë', 'üêô'] },
    { id: 'insects', name: 'Owady', emojis: ['ü¶ã', 'üêõ', 'üêú', 'üêù', 'üêû', 'ü¶ó', 'üï∑Ô∏è', 'ü¶Ç'] },
    { id: 'birds', name: 'Ptaki', emojis: ['ü¶Ö', 'ü¶ú', 'ü¶¢', 'ü¶©', 'ü¶ö', 'ü¶É', 'ü¶â', 'üêß'] },
    
    // Jedzenie
    { id: 'fruits', name: 'Owoce', emojis: ['üçé', 'üçå', 'üçá', 'üçä', 'üçì', 'üçë', 'ü•ù', 'üçç'] },
    { id: 'vegetables', name: 'Warzywa', emojis: ['ü•ï', 'ü•¶', 'ü•¨', 'ü•í', 'üçÖ', 'üåΩ', 'ü•î', 'üßÖ'] },
    { id: 'fast-food', name: 'Fast Food', emojis: ['üçî', 'üçü', 'üå≠', 'üçï', 'üåÆ', 'üåØ', 'ü•™', 'ü•§'] },
    { id: 'desserts', name: 'Desery', emojis: ['üç¶', 'üç∞', 'üßÅ', 'üç™', 'üç´', 'üç©', 'ü•û', 'üçÆ'] },
    { id: 'drinks', name: 'Napoje', emojis: ['‚òï', 'üçµ', 'üßÉ', 'ü•§', 'üßã', 'üç∑', 'üçπ', 'ü•Ç'] },
    
    // Sport i Rozrywka
    { id: 'ball-sports', name: 'Sporty z Pi≈ÇkƒÖ', emojis: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üèâ', 'üé±'] },
    { id: 'olympic-sports', name: 'Sporty Olimpijskie', emojis: ['üèä‚Äç‚ôÇÔ∏è', 'ü§∏‚Äç‚ôÇÔ∏è', 'üèÉ‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÇÔ∏è', 'ü§∫', 'üèπ', '‚õπÔ∏è‚Äç‚ôÇÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è'] },
    { id: 'music', name: 'Muzyka', emojis: ['üé∏', 'üéπ', 'üé∫', 'üéª', 'ü•Å', 'üé∑', 'ü™ó', 'üéº'] },
    { id: 'games', name: 'Gry', emojis: ['üéÆ', 'üé≤', 'üéØ', 'üé≥', 'üé™', 'üé®', 'üé≠', 'üé™'] },
    { id: 'activities', name: 'Aktywno≈õci', emojis: ['üé£', 'ü§ø', 'üèπ', 'üéØ', 'ü™Ç', 'üèÑ‚Äç‚ôÇÔ∏è', 'üö£‚Äç‚ôÇÔ∏è', 'üßó‚Äç‚ôÇÔ∏è'] },
    
    // Transport i Miejsca
    { id: 'transport', name: 'Transport', emojis: ['‚úàÔ∏è', 'üöó', 'üöÇ', 'üö¢', 'üöÅ', 'üö≤', 'üöå', 'üõµ'] },
    { id: 'places', name: 'Miejsca', emojis: ['üóΩ', 'üóº', 'üóø', 'üé°', 'üé¢', '‚õ∞Ô∏è', 'üåã', 'üèñÔ∏è'] },
    { id: 'buildings', name: 'Budynki', emojis: ['üè∞', 'üèõÔ∏è', '‚õ™', 'üè¢', 'üè§', 'üè®', 'üè™', 'üè´'] },
    { id: 'landmarks', name: 'Zabytki', emojis: ['üóΩ', 'üóº', 'üóø', 'üèõÔ∏è', 'üè∞', '‚õ©Ô∏è', 'üïå', 'üïç'] },
    { id: 'nature-places', name: 'Miejsca w Naturze', emojis: ['üåã', '‚õ∞Ô∏è', 'üèñÔ∏è', 'üèúÔ∏è', 'üèùÔ∏è', 'üèûÔ∏è', '‚ùÑÔ∏è', 'üå≤'] },
    
    // Natura i Pogoda
    { id: 'flowers', name: 'Kwiaty', emojis: ['üå∏', 'üåπ', 'üå∫', 'üåª', 'üåº', 'üå∑', 'üíê', 'üå±'] },
    { id: 'weather', name: 'Pogoda', emojis: ['‚òÄÔ∏è', 'üå§Ô∏è', '‚òÅÔ∏è', 'üåßÔ∏è', '‚õàÔ∏è', '‚ùÑÔ∏è', 'üåà', '‚ö°'] },
    { id: 'space', name: 'Kosmos', emojis: ['üåé', 'üåô', '‚≠ê', 'üöÄ', 'üõ∏', '‚òÑÔ∏è', 'üå†', 'üåå'] },
    { id: 'plants', name: 'Ro≈õliny', emojis: ['üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', '‚òòÔ∏è', 'üçÄ'] },
    { id: 'seasons', name: 'Pory Roku', emojis: ['üå∏', '‚òÄÔ∏è', 'üçÅ', '‚ùÑÔ∏è', 'üå∫', 'üåª', 'üçÇ', '‚õÑ'] }
  ];

  const difficultySettings = {
    easy: { pairs: 6, timeLimit: 120 },
    medium: { pairs: 8, timeLimit: 180 }
  };

  const filteredGames = memoryGames.filter(game => 
    game.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (currentGame) {
    const game = memoryGames.find(g => g.id === currentGame);
    if (game) {
      return (
        <Memory
          onBack={() => setCurrentGame(null)}
          emojis={game.emojis}
          gameName={game.name}
          difficulty={difficulty}
          settings={difficultySettings[difficulty]}
        />
      );
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <GameController className="w-16 h-16 mx-auto text-indigo-600" />
          <h1 className="text-4xl font-bold text-gray-900 mt-4">Memory</h1>
          
          <div className="mt-6 space-y-4">
            <div className="flex justify-center gap-2">
              {(['easy', 'medium'] as const).map((level) => (
                <button
                  key={level}
                  onClick={() => setDifficulty(level)}
                  className={`px-4 py-2 rounded-lg transition-colors ${
                    difficulty === level
                      ? 'bg-green-600 text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  {level === 'easy' ? '≈Åatwy' : '≈öredni'}
                </button>
              ))}
            </div>

            <input
              type="text"
              placeholder="Wyszukaj grƒô..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full max-w-md px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredGames.map((game) => (
            <button
              key={game.id}
              onClick={() => setCurrentGame(game.id)}
              className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition-all hover:-translate-y-1"
            >
              <h2 className="text-2xl font-bold text-gray-900 mb-4">{game.name}</h2>
              <div className="grid grid-cols-4 gap-2">
                {game.emojis.slice(0, 4).map((emoji, index) => (
                  <div
                    key={index}
                    className="aspect-square bg-gray-50 rounded-lg flex items-center justify-center text-2xl"
                  >
                    {emoji}
                  </div>
                ))}
              </div>
              <div className="mt-4 text-sm text-gray-600">
                {difficulty === 'easy' ? '6 par' : '8 par'}
                {' ‚Ä¢ '}
                {difficultySettings[difficulty].timeLimit}s
              </div>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}

export default App;